// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/watchlist.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/nagymarci/stock-watchlist/model"
	reflect "reflect"
)

// MockstockClient is a mock of stockClient interface
type MockstockClient struct {
	ctrl     *gomock.Controller
	recorder *MockstockClientMockRecorder
}

// MockstockClientMockRecorder is the mock recorder for MockstockClient
type MockstockClientMockRecorder struct {
	mock *MockstockClient
}

// NewMockstockClient creates a new mock instance
func NewMockstockClient(ctrl *gomock.Controller) *MockstockClient {
	mock := &MockstockClient{ctrl: ctrl}
	mock.recorder = &MockstockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstockClient) EXPECT() *MockstockClientMockRecorder {
	return m.recorder
}

// RegisterStock mocks base method
func (m *MockstockClient) RegisterStock(symbol string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterStock", symbol)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterStock indicates an expected call of RegisterStock
func (mr *MockstockClientMockRecorder) RegisterStock(symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStock", reflect.TypeOf((*MockstockClient)(nil).RegisterStock), symbol)
}

// Get mocks base method
func (m *MockstockClient) Get(symbol string) (model.StockData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", symbol)
	ret0, _ := ret[0].(model.StockData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockstockClientMockRecorder) Get(symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockstockClient)(nil).Get), symbol)
}
